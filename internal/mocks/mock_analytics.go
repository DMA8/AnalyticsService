// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/analytics.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	models "gitlab.com/g6834/team31/analytics/internal/domain/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAnalytics is a mock of Analytics interface.
type MockAnalytics struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsMockRecorder
}

// MockAnalyticsMockRecorder is the mock recorder for MockAnalytics.
type MockAnalyticsMockRecorder struct {
	mock *MockAnalytics
}

// NewMockAnalytics creates a new mock instance.
func NewMockAnalytics(ctrl *gomock.Controller) *MockAnalytics {
	mock := &MockAnalytics{ctrl: ctrl}
	mock.recorder = &MockAnalyticsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalytics) EXPECT() *MockAnalyticsMockRecorder {
	return m.recorder
}

// ApprovedTasks mocks base method.
func (m *MockAnalytics) ApprovedTasks(ctx context.Context) (models.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovedTasks", ctx)
	ret0, _ := ret[0].(models.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovedTasks indicates an expected call of ApprovedTasks.
func (mr *MockAnalyticsMockRecorder) ApprovedTasks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovedTasks", reflect.TypeOf((*MockAnalytics)(nil).ApprovedTasks), ctx)
}

// DeclinedTasks mocks base method.
func (m *MockAnalytics) DeclinedTasks(ctx context.Context) (models.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclinedTasks", ctx)
	ret0, _ := ret[0].(models.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclinedTasks indicates an expected call of DeclinedTasks.
func (mr *MockAnalyticsMockRecorder) DeclinedTasks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclinedTasks", reflect.TypeOf((*MockAnalytics)(nil).DeclinedTasks), ctx)
}

// SummaryTime mocks base method.
func (m *MockAnalytics) SummaryTime(ctx context.Context) ([]models.SummaryTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummaryTime", ctx)
	ret0, _ := ret[0].([]models.SummaryTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SummaryTime indicates an expected call of SummaryTime.
func (mr *MockAnalyticsMockRecorder) SummaryTime(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummaryTime", reflect.TypeOf((*MockAnalytics)(nil).SummaryTime), ctx)
}
