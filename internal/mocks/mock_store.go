// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/store.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	models "gitlab.com/g6834/team31/analytics/internal/domain/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDbInterface is a mock of DbInterface interface.
type MockDbInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDbInterfaceMockRecorder
}

// MockDbInterfaceMockRecorder is the mock recorder for MockDbInterface.
type MockDbInterfaceMockRecorder struct {
	mock *MockDbInterface
}

// NewMockDbInterface creates a new mock instance.
func NewMockDbInterface(ctrl *gomock.Controller) *MockDbInterface {
	mock := &MockDbInterface{ctrl: ctrl}
	mock.recorder = &MockDbInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbInterface) EXPECT() *MockDbInterfaceMockRecorder {
	return m.recorder
}

// ApprovedTasks mocks base method.
func (m *MockDbInterface) ApprovedTasks(ctx context.Context) (models.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovedTasks", ctx)
	ret0, _ := ret[0].(models.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovedTasks indicates an expected call of ApprovedTasks.
func (mr *MockDbInterfaceMockRecorder) ApprovedTasks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovedTasks", reflect.TypeOf((*MockDbInterface)(nil).ApprovedTasks), ctx)
}

// DeclinedTasks mocks base method.
func (m *MockDbInterface) DeclinedTasks(ctx context.Context) (models.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclinedTasks", ctx)
	ret0, _ := ret[0].(models.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclinedTasks indicates an expected call of DeclinedTasks.
func (mr *MockDbInterfaceMockRecorder) DeclinedTasks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclinedTasks", reflect.TypeOf((*MockDbInterface)(nil).DeclinedTasks), ctx)
}

// NewMail mocks base method.
func (m *MockDbInterface) NewMail(ctx context.Context, mail models.Mail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMail", ctx, mail)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewMail indicates an expected call of NewMail.
func (mr *MockDbInterfaceMockRecorder) NewMail(ctx, mail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMail", reflect.TypeOf((*MockDbInterface)(nil).NewMail), ctx, mail)
}

// NewTask mocks base method.
func (m *MockDbInterface) NewTask(ctx context.Context, task models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewTask indicates an expected call of NewTask.
func (mr *MockDbInterfaceMockRecorder) NewTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTask", reflect.TypeOf((*MockDbInterface)(nil).NewTask), ctx, task)
}

// NewTaskStatus mocks base method.
func (m *MockDbInterface) NewTaskStatus(ctx context.Context, status models.TaskStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTaskStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewTaskStatus indicates an expected call of NewTaskStatus.
func (mr *MockDbInterfaceMockRecorder) NewTaskStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTaskStatus", reflect.TypeOf((*MockDbInterface)(nil).NewTaskStatus), ctx, status)
}

// SummaryTime mocks base method.
func (m *MockDbInterface) SummaryTime(ctx context.Context) ([]models.SummaryTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummaryTime", ctx)
	ret0, _ := ret[0].([]models.SummaryTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SummaryTime indicates an expected call of SummaryTime.
func (mr *MockDbInterfaceMockRecorder) SummaryTime(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummaryTime", reflect.TypeOf((*MockDbInterface)(nil).SummaryTime), ctx)
}

// UpdateTask mocks base method.
func (m *MockDbInterface) UpdateTask(ctx context.Context, task models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockDbInterfaceMockRecorder) UpdateTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockDbInterface)(nil).UpdateTask), ctx, task)
}
